/* The following code was generated by JFlex 1.4.3 on 18/05/18 11:41 AM */


/*------------  1ra Area: Codigo de Usuario ---------*/
//------> Paquetes,importaciones


package Analizadores;
import java_cup.runtime.*;

/*------------  2da Area: Opciones y Declaraciones ---------*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 18/05/18 11:41 AM from the specification file
 * <tt>C:/Users/C1_ro/Documents/NetBeansProjects/Analizador_v2/src/Analizadores/Lexer.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\26\1\0\2\26\22\0\1\26\6\0\1\0\5\0\1\0"+
    "\23\0\1\10\1\1\1\21\1\3\1\2\1\24\1\17\1\0\1\4"+
    "\1\25\1\0\1\5\1\14\1\13\1\7\1\22\1\0\1\6\1\20"+
    "\1\11\1\16\1\23\1\0\1\15\1\12\1\0\4\0\1\27\1\0"+
    "\1\10\1\1\1\21\1\3\1\2\1\24\1\17\1\0\1\4\1\25"+
    "\1\0\1\5\1\14\1\13\1\7\1\22\1\0\1\6\1\20\1\11"+
    "\1\16\1\23\1\0\1\15\1\12\1\0\u1f9e\0\1\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\145\0\1\2\4\0\1\3\47\0\1\4"+
    "\4\0\1\5\33\0\1\6\1\7\1\0\1\10\40\0"+
    "\1\11\10\0\1\12\6\0\1\13\12\0\1\14\1\0"+
    "\1\15\7\0\1\16\1\17\6\0\1\20\5\0\1\21"+
    "\5\0\1\22\1\0\1\23\1\24\25\0\1\25\1\0"+
    "\1\26\1\27\2\0\1\30\10\0\1\31\1\32\1\0"+
    "\1\33\7\0\1\34\1\0\1\35\2\0\1\36\1\37"+
    "\1\40\1\0\1\41\1\42\1\43\1\0\1\44\2\0"+
    "\1\45\1\46\2\0\1\47\1\0\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[354];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\30\0\60\0\110\0\140\0\170\0\220\0\250"+
    "\0\300\0\330\0\360\0\u0108\0\u0120\0\u0138\0\u0150\0\u0168"+
    "\0\u0180\0\u0198\0\u01b0\0\u01c8\0\u01e0\0\u01f8\0\u0210\0\u0228"+
    "\0\u0240\0\u0258\0\u0270\0\u0288\0\u02a0\0\u02b8\0\u02d0\0\u02e8"+
    "\0\u0300\0\u0318\0\u0330\0\u0348\0\u0360\0\u0378\0\u0390\0\u03a8"+
    "\0\u03c0\0\u03d8\0\u03f0\0\u0408\0\u0420\0\u0438\0\u0450\0\u0468"+
    "\0\u0480\0\u0498\0\u04b0\0\u04c8\0\u04e0\0\u04f8\0\u0510\0\u0528"+
    "\0\u0540\0\u0558\0\u0570\0\u0588\0\u05a0\0\u05b8\0\u05d0\0\u05e8"+
    "\0\u0600\0\u0618\0\u0630\0\u0648\0\u0660\0\u0678\0\u0690\0\u06a8"+
    "\0\u06c0\0\u06d8\0\u06f0\0\u0708\0\u0720\0\u0738\0\u0750\0\u0768"+
    "\0\u0780\0\u0798\0\u07b0\0\u07c8\0\u07e0\0\u07f8\0\u0810\0\u0828"+
    "\0\u0840\0\u0858\0\u0870\0\u0888\0\u08a0\0\u08b8\0\u08d0\0\u08e8"+
    "\0\u0900\0\u0918\0\u0930\0\u0948\0\u0960\0\u0978\0\u0990\0\u09a8"+
    "\0\u09c0\0\u09d8\0\u09f0\0\u0a08\0\u0a20\0\u0a38\0\u0a50\0\u0a68"+
    "\0\u0a80\0\u0a98\0\250\0\u0ab0\0\u0ac8\0\u0ae0\0\u0af8\0\u0b10"+
    "\0\u0b28\0\u0b40\0\u0b58\0\u0b70\0\u0b88\0\u0ba0\0\u0bb8\0\u0bd0"+
    "\0\u0be8\0\u0c00\0\u0c18\0\u0c30\0\u0c48\0\u0c60\0\u0c78\0\u0c90"+
    "\0\u0ca8\0\u0cc0\0\u0cd8\0\u0cf0\0\u0d08\0\u0d20\0\u0d38\0\u0d50"+
    "\0\u0d68\0\u0d80\0\u0d98\0\u0db0\0\u0dc8\0\u0de0\0\u0df8\0\u0e10"+
    "\0\u0e28\0\u0e40\0\250\0\u0e58\0\u0e70\0\u0e88\0\u0ea0\0\250"+
    "\0\u0eb8\0\u0ed0\0\u0ee8\0\u0f00\0\u0f18\0\u0f30\0\u0f48\0\u0f60"+
    "\0\u0f78\0\u0f90\0\u0fa8\0\u0fc0\0\u0fd8\0\u0ff0\0\u1008\0\u1020"+
    "\0\u1038\0\u1050\0\u1068\0\u1080\0\u1098\0\u10b0\0\u10c8\0\u10e0"+
    "\0\u10f8\0\u1110\0\u1128\0\250\0\250\0\u1140\0\250\0\u1158"+
    "\0\u1170\0\u1188\0\u11a0\0\u11b8\0\u11d0\0\u11e8\0\u1200\0\u1218"+
    "\0\u1230\0\u1248\0\u1260\0\u1278\0\u1290\0\u12a8\0\u12c0\0\u12d8"+
    "\0\u12f0\0\u1308\0\u1320\0\u1338\0\u1350\0\u1368\0\u1380\0\u1398"+
    "\0\u13b0\0\u13c8\0\u13e0\0\u13f8\0\u1410\0\u1428\0\u1440\0\250"+
    "\0\u1458\0\u1470\0\u1488\0\u14a0\0\u14b8\0\u14d0\0\u14e8\0\u1500"+
    "\0\250\0\u1518\0\u1530\0\u1548\0\u1560\0\u1578\0\u1590\0\250"+
    "\0\u15a8\0\u15c0\0\u15d8\0\u15f0\0\u1608\0\u1620\0\u1638\0\u1650"+
    "\0\u1668\0\u1680\0\250\0\u1698\0\250\0\u16b0\0\u16c8\0\u16e0"+
    "\0\u16f8\0\u1710\0\u1728\0\u1740\0\250\0\250\0\u1758\0\u1770"+
    "\0\u1788\0\u17a0\0\u17b8\0\u17d0\0\250\0\u17e8\0\u1800\0\u1818"+
    "\0\u1830\0\u1848\0\250\0\u1860\0\u1878\0\u1890\0\u18a8\0\u18c0"+
    "\0\250\0\u18d8\0\250\0\250\0\u18f0\0\u1908\0\u1920\0\u1938"+
    "\0\u1950\0\u1968\0\u1980\0\u1998\0\u19b0\0\u19c8\0\u19e0\0\u19f8"+
    "\0\u1a10\0\u1a28\0\u1a40\0\u1a58\0\u1a70\0\u1a88\0\u1aa0\0\u1ab8"+
    "\0\u1ad0\0\250\0\u1ae8\0\250\0\250\0\u1b00\0\u1b18\0\250"+
    "\0\u1b30\0\u1b48\0\u1b60\0\u1b78\0\u1b90\0\u1ba8\0\u1bc0\0\u1bd8"+
    "\0\250\0\250\0\u1bf0\0\250\0\u1c08\0\u1c20\0\u1c38\0\u1c50"+
    "\0\u1c68\0\u1c80\0\u1c98\0\250\0\u1cb0\0\250\0\u1cc8\0\u1ce0"+
    "\0\250\0\250\0\250\0\u1cf8\0\250\0\250\0\250\0\u1d10"+
    "\0\250\0\u1d28\0\u1d40\0\250\0\250\0\u1d58\0\u1d70\0\250"+
    "\0\u1d88\0\250";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[354];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\4\0\1\2\3\0\1\3\7\0\1\4\1\5\1\6"+
    "\1\7\2\0\1\10\14\0\1\11\17\0\1\12\2\0"+
    "\1\13\37\0\1\14\20\0\1\15\10\0\1\16\1\17"+
    "\14\0\1\20\22\0\1\21\1\22\66\0\1\23\17\0"+
    "\1\24\25\0\1\25\27\0\1\26\20\0\1\27\22\0"+
    "\1\30\43\0\1\31\27\0\1\32\2\0\1\33\4\0"+
    "\1\34\47\0\1\35\6\0\1\36\23\0\1\37\54\0"+
    "\1\40\3\0\1\41\1\42\14\0\1\43\1\44\10\0"+
    "\1\45\1\46\34\0\1\47\27\0\1\50\37\0\1\51"+
    "\2\0\1\52\5\0\1\53\1\54\4\0\1\55\10\0"+
    "\1\56\30\0\1\57\20\0\1\60\13\0\1\61\4\0"+
    "\1\62\1\0\1\63\50\0\1\64\6\0\1\65\24\0"+
    "\1\66\1\0\1\67\2\0\1\70\1\71\1\0\1\72"+
    "\1\73\4\0\1\74\10\0\1\75\40\0\1\76\24\0"+
    "\1\77\26\0\1\100\22\0\1\101\40\0\1\102\24\0"+
    "\1\103\25\0\1\104\30\0\1\105\1\106\23\0\1\107"+
    "\40\0\1\110\16\0\1\111\26\0\1\112\33\0\1\113"+
    "\27\0\1\114\47\0\1\115\22\0\1\116\13\0\1\117"+
    "\23\0\1\120\35\0\1\121\7\0\1\122\1\0\1\123"+
    "\32\0\1\124\20\0\1\125\27\0\1\126\35\0\1\127"+
    "\7\0\1\130\25\0\1\131\34\0\1\132\30\0\1\133"+
    "\33\0\1\134\16\0\1\135\31\0\1\136\42\0\1\137"+
    "\33\0\1\140\6\0\1\141\37\0\1\142\24\0\1\143"+
    "\32\0\1\144\1\145\33\0\1\146\22\0\1\147\36\0"+
    "\1\150\25\0\1\151\32\0\1\152\26\0\1\153\25\0"+
    "\1\154\12\0\1\155\1\156\15\0\1\157\7\0\1\160"+
    "\33\0\1\161\40\0\1\162\24\0\1\163\17\0\1\164"+
    "\30\0\1\165\24\0\1\166\30\0\1\167\43\0\1\170"+
    "\14\0\1\171\25\0\1\172\44\0\1\173\13\0\1\174"+
    "\37\0\1\175\23\0\1\176\22\0\1\177\31\0\1\200"+
    "\25\0\1\201\31\0\1\202\25\0\1\203\36\0\1\204"+
    "\37\0\1\205\11\0\1\206\14\0\1\207\1\210\30\0"+
    "\1\211\23\0\1\212\21\0\1\213\24\0\1\214\33\0"+
    "\1\215\1\216\17\0\1\217\43\0\1\220\15\0\1\221"+
    "\25\0\1\222\40\0\1\223\16\0\1\224\33\0\1\225"+
    "\23\0\1\226\43\0\1\227\24\0\1\230\32\0\1\231"+
    "\32\0\1\232\16\0\1\233\27\0\1\234\25\0\1\235"+
    "\35\0\1\236\23\0\1\237\26\0\1\240\31\0\1\241"+
    "\36\0\1\242\33\0\1\243\27\0\1\244\23\0\1\245"+
    "\22\0\1\246\40\0\1\247\7\0\1\250\44\0\1\251"+
    "\12\0\1\252\25\0\1\253\27\0\1\254\35\0\1\255"+
    "\27\0\1\256\24\0\1\257\26\0\1\260\31\0\1\261"+
    "\37\0\1\262\17\0\1\263\26\0\1\264\43\0\1\265"+
    "\22\0\1\266\24\0\1\267\24\0\1\270\41\0\1\271"+
    "\26\0\1\272\15\0\1\273\41\0\1\274\16\0\1\275"+
    "\42\0\1\276\14\0\1\277\35\0\1\300\35\0\1\301"+
    "\26\0\1\302\12\0\1\303\34\0\1\304\22\0\1\305"+
    "\27\0\1\306\27\0\1\307\27\0\1\310\27\0\1\311"+
    "\46\0\1\312\10\0\1\313\44\0\1\314\27\0\1\315"+
    "\26\0\1\316\15\0\1\317\26\0\1\320\24\0\1\321"+
    "\46\0\1\322\12\0\1\323\36\0\1\324\34\0\1\325"+
    "\17\0\1\326\23\0\1\327\32\0\1\330\22\0\1\331"+
    "\54\0\1\332\7\0\1\333\36\0\1\334\21\0\1\335"+
    "\23\0\1\336\33\0\1\337\26\0\1\340\24\0\1\341"+
    "\26\0\1\342\32\0\1\343\34\0\1\344\35\0\1\345"+
    "\31\0\1\346\7\0\1\347\37\0\1\350\23\0\1\351"+
    "\27\0\1\352\24\0\1\353\41\0\1\354\15\0\1\355"+
    "\33\0\1\356\21\0\1\357\45\0\1\360\17\0\1\361"+
    "\20\0\1\362\37\0\1\363\26\0\1\364\30\0\1\365"+
    "\25\0\1\366\40\0\1\367\15\0\1\370\41\0\1\371"+
    "\1\0\1\372\20\0\1\373\21\0\1\374\30\0\1\375"+
    "\30\0\1\376\41\0\1\377\15\0\1\u0100\30\0\1\u0101"+
    "\27\0\1\u0102\23\0\1\u0103\33\0\1\u0104\26\0\1\u0105"+
    "\27\0\1\u0106\24\0\1\u0107\36\0\1\u0108\23\0\1\u0109"+
    "\31\0\1\u010a\41\0\1\u010b\15\0\1\u010c\36\0\1\u010d"+
    "\20\0\1\u010e\34\0\1\u010f\15\0\1\u0110\34\0\1\u0111"+
    "\22\0\1\u0112\36\0\1\u0113\25\0\1\u0114\24\0\1\u0115"+
    "\25\0\1\u0116\30\0\1\u0117\32\0\1\u0118\32\0\1\u0119"+
    "\20\0\1\u011a\36\0\1\u011b\17\0\1\u011c\35\0\1\u011d"+
    "\21\0\1\u011e\35\0\1\u011f\21\0\1\u0120\26\0\1\u0121"+
    "\40\0\1\u0122\20\0\1\u0123\33\0\1\u0124\23\0\1\u0125"+
    "\27\0\1\u0126\34\0\1\u0127\41\0\1\u0128\10\0\1\u0129"+
    "\46\0\1\u012a\12\0\1\u012b\30\0\1\u012c\33\0\1\u012d"+
    "\32\0\1\u012e\17\0\1\u012f\30\0\1\u0130\24\0\1\u0131"+
    "\32\0\1\u0132\24\0\1\u0133\32\0\1\u0134\40\0\1\u0135"+
    "\17\0\1\u0136\42\0\1\u0137\24\0\1\u0138\32\0\1\u0139"+
    "\27\0\1\u013a\10\0\1\u013b\33\0\1\u013c\42\0\1\u013d"+
    "\14\0\1\u013e\27\0\1\u013f\36\0\1\u0140\27\0\1\u0141"+
    "\16\0\1\u0142\23\0\1\u0143\40\0\1\u0144\37\0\1\u0145"+
    "\27\0\1\u0146\11\0\1\u0147\32\0\1\u0148\27\0\1\u0149"+
    "\27\0\1\u014a\42\0\1\u014b\24\0\1\u014c\17\0\1\u014d"+
    "\37\0\1\u014e\20\0\1\u014f\26\0\1\u0150\37\0\1\u0151"+
    "\16\0\1\u0152\27\0\1\u0153\22\0\1\u0154\45\0\1\u0155"+
    "\27\0\1\u0156\27\0\1\u0157\17\0\1\u0158\37\0\1\u0159"+
    "\13\0\1\u015a\34\0\1\u015b\36\0\1\u015c\27\0\1\u015d"+
    "\32\0\1\u015e\10\0\1\u015f\32\0\1\u0160\43\0\1\u0161"+
    "\13\0\1\u0162\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7584];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\145\0\1\1\4\0\1\11\47\0\1\11"+
    "\4\0\1\11\33\0\2\11\1\0\1\11\40\0\1\11"+
    "\10\0\1\11\6\0\1\11\12\0\1\11\1\0\1\11"+
    "\7\0\2\11\6\0\1\11\5\0\1\11\5\0\1\11"+
    "\1\0\2\11\25\0\1\11\1\0\2\11\2\0\1\11"+
    "\10\0\2\11\1\0\1\11\7\0\1\11\1\0\1\11"+
    "\2\0\3\11\1\0\3\11\1\0\1\11\2\0\2\11"+
    "\2\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[354];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    //----> Codigo de usuario en sintaxis java en este caso no hay nada


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 38: 
          { System.out.println("Reconocio "+yytext()+" Contraccion Distributiva"); return new Symbol(sym.CC_Distributivas, yycolumn, yyline, yytext());
          }
        case 41: break;
        case 3: 
          { System.out.println("Reconocio "+yytext()+" Verbo Primera Persona"); return new Symbol(sym.VER_AM, yycolumn, yyline, yytext());
          }
        case 42: break;
        case 1: 
          { /* Espacios en blanco, se ignoran */
          }
        case 43: break;
        case 39: 
          { System.out.println("Reconocio "+yytext()+" Pronombre Demostrativo"); return new Symbol(sym.Pron_Demostrativo, yycolumn, yyline, yytext());
          }
        case 44: break;
        case 9: 
          { System.out.println("Reconocio "+yytext()+" Adverbio Tiempo"); return new Symbol(sym.ADB_Tiempo, yycolumn, yyline, yytext());
          }
        case 45: break;
        case 18: 
          { System.out.println("Reconocio "+yytext()+" Interjeccion"); return new Symbol(sym.Interjeccion, yycolumn, yyline, yytext());
          }
        case 46: break;
        case 36: 
          { System.out.println("Reconocio "+yytext()+" Contraccion Copulativa"); return new Symbol(sym.CC_Adversativas, yycolumn, yyline, yytext());
          }
        case 47: break;
        case 26: 
          { System.out.println("Reconocio "+yytext()+" Pronombre Plural"); return new Symbol(sym.PRON_PER_PLUR, yycolumn, yyline, yytext());
          }
        case 48: break;
        case 27: 
          { System.out.println("Reconocio "+yytext()+" Adverbio Afirmacion"); return new Symbol(sym.ADB_Afirmacion, yycolumn, yyline, yytext());
          }
        case 49: break;
        case 34: 
          { System.out.println("Reconocio "+yytext()+" Contraccion Comparativas"); return new Symbol(sym.CS_Comparativas, yycolumn, yyline, yytext());
          }
        case 50: break;
        case 31: 
          { System.out.println("Reconocio "+yytext()+" Adjetivo Demostrativo"); return new Symbol(sym.Ad_Demostrativo, yycolumn, yyline, yytext());
          }
        case 51: break;
        case 17: 
          { System.out.println("Reconocio "+yytext()+" Premoposicion"); return new Symbol(sym.Preposicion, yycolumn, yyline, yytext());
          }
        case 52: break;
        case 14: 
          { System.out.println("Reconocio "+yytext()+" Adjetivo Posesivo"); return new Symbol(sym.Ad_Posesivo, yycolumn, yyline, yytext());
          }
        case 53: break;
        case 40: 
          { System.out.println("Reconocio "+yytext()+" Pronombre Interrogativo"); return new Symbol(sym.Pron_Interrogativo, yycolumn, yyline, yytext());
          }
        case 54: break;
        case 25: 
          { System.out.println("Reconocio "+yytext()+" Pronombre Singular"); return new Symbol(sym.PRON_PER_SING, yycolumn, yyline, yytext());
          }
        case 55: break;
        case 19: 
          { System.out.println("Reconocio "+yytext()+" Adverbio Negacion"); return new Symbol(sym.ADB_Negacion, yycolumn, yyline, yytext());
          }
        case 56: break;
        case 8: 
          { System.out.println("Reconocio "+yytext()+" Adverbio Lugar"); return new Symbol(sym.ADB_Lugar, yycolumn, yyline, yytext());
          }
        case 57: break;
        case 16: 
          { System.out.println("Reconocio "+yytext()+" Contraccion Casuales"); return new Symbol(sym.CS_Casuales, yycolumn, yyline, yytext());
          }
        case 58: break;
        case 2: 
          { System.out.println("Reconocio "+yytext()+" Pronombre I"); return new Symbol(sym.PRON_I, yycolumn, yyline, yytext());
          }
        case 59: break;
        case 33: 
          { System.out.println("Reconocio "+yytext()+" Contraccion Consecutiva"); return new Symbol(sym.CS_Consecutivas, yycolumn, yyline, yytext());
          }
        case 60: break;
        case 11: 
          { System.out.println("Reconocio "+yytext()+" Contraccion Final"); return new Symbol(sym.CS_Finales, yycolumn, yyline, yytext());
          }
        case 61: break;
        case 12: 
          { System.out.println("Reconocio "+yytext()+" Pronombre Personal"); return new Symbol(sym.PRO_PERSON, yycolumn, yyline, yytext());
          }
        case 62: break;
        case 23: 
          { System.out.println("Reconocio "+yytext()+" Contraccion"); return new Symbol(sym.Contracciones, yycolumn, yyline, yytext());
          }
        case 63: break;
        case 15: 
          { System.out.println("Reconocio "+yytext()+" Articulo Definido"); return new Symbol(sym.Ar_Definido, yycolumn, yyline, yytext());
          }
        case 64: break;
        case 21: 
          { System.out.println("Reconocio "+yytext()+" Adjetivo Indefinido"); return new Symbol(sym.Ad_Indefinido, yycolumn, yyline, yytext());
          }
        case 65: break;
        case 10: 
          { System.out.println("Reconocio "+yytext()+" Sustantivo"); return new Symbol(sym.Sustantivo, yycolumn, yyline, yytext());
          }
        case 66: break;
        case 22: 
          { System.out.println("Reconocio "+yytext()+" Articulo Indefinido"); return new Symbol(sym.Ar_Indefinido, yycolumn, yyline, yytext());
          }
        case 67: break;
        case 37: 
          { System.out.println("Reconocio "+yytext()+" Contraccion Condicional"); return new Symbol(sym.CS_Condicionales, yycolumn, yyline, yytext());
          }
        case 68: break;
        case 30: 
          { System.out.println("Reconocio "+yytext()+" Verbo Irregular"); return new Symbol(sym.VB_Irregulares, yycolumn, yyline, yytext());
          }
        case 69: break;
        case 32: 
          { System.out.println("Reconocio "+yytext()+" Adjetivo Calificativo"); return new Symbol(sym.Ad_Calificativo, yycolumn, yyline, yytext());
          }
        case 70: break;
        case 35: 
          { System.out.println("Reconocio "+yytext()+" Contraccion Explicativa"); return new Symbol(sym.CC_Explicativas, yycolumn, yyline, yytext());
          }
        case 71: break;
        case 29: 
          { System.out.println("Reconocio "+yytext()+" Contraccion Copulativa"); return new Symbol(sym.CC_Copulativas, yycolumn, yyline, yytext());
          }
        case 72: break;
        case 6: 
          { System.out.println("Reconocio "+yytext()+" Verbo Singular"); return new Symbol(sym.VER_SING, yycolumn, yyline, yytext());
          }
        case 73: break;
        case 7: 
          { System.out.println("Reconocio "+yytext()+" Verbo Plural"); return new Symbol(sym.VER_PLUR, yycolumn, yyline, yytext());
          }
        case 74: break;
        case 24: 
          { System.out.println("Reconocio "+yytext()+" Contraccion Concesivas"); return new Symbol(sym.CS_Concesivas, yycolumn, yyline, yytext());
          }
        case 75: break;
        case 20: 
          { System.out.println("Reconocio "+yytext()+" Adverbio Cantidad"); return new Symbol(sym.ADB_Cantidad, yycolumn, yyline, yytext());
          }
        case 76: break;
        case 4: 
          { System.out.println("Reconocio "+yytext()+" Adverbio Duda"); return new Symbol(sym.ADB_Duda, yycolumn, yyline, yytext());
          }
        case 77: break;
        case 5: 
          { System.out.println("Reconocio "+yytext()+" Adverbio Modo"); return new Symbol(sym.ADB_Modo, yycolumn, yyline, yytext());
          }
        case 78: break;
        case 28: 
          { System.out.println("Reconocio "+yytext()+" Contraccion Disyuntiva"); return new Symbol(sym.CC_Disyuntivas, yycolumn, yyline, yytext());
          }
        case 79: break;
        case 13: 
          { System.out.println("Reconocio "+yytext()+" Verbo Regular"); return new Symbol(sym.VB_Regular, yycolumn, yyline, yytext());
          }
        case 80: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
